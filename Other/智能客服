站在巨人的肩膀上。
- 利用 Cluade 生成详细的方案
- 搜索相关开源项目
	- 利用 Spring AI 的智能客服
	- 利用 LangChain 或者其他框架写的智能客服系统
- 回看 RAG 训练营的所有视频
# 询问 Claude

我要写一个智能客服，利用大模型 + Spring AI （ RAG+Tools），请帮我写一个详细的计划，该怎么写？首先我能想到的是，先对用户进行意图识别。

任何行业都行，数据库用 MongoDB 、MySQL 或者其他的都可以，暂时不需要前端内容，只需要提供 HTTP 接口即可，暂时采用 fatjar 部署，预期规模 1000QPS，

首先把整体流程写下来，从意图识别开始，最后到返回合适的信息给用户。

再进行整体计划描述。

# 向量数据库选型
Milvus
- Milvus Lite（小型项目）
- Milvus Standalone（中小型项目）
- Milvus Cluster
OpenGuass（如果要全面国产化，只能选高斯数据库了）

| 向量数据库名称       | 是否开源 | 是否支持自托管 | 是否支持云端管理 | 是否专为向量搜索设计 | 开发者体验 | 每秒查询数       | 延迟/ms | 支持索引类型       | 是否支持混合搜索 | 是否支持磁盘索引 | 是否支持角色访问控制 | 是否自动态分片 | 是否免费托管计划 | 价格(50k向量) | 价格(20M向量)      |
| ------------- | ---- | ------- | -------- | ---------- | ----- | ----------- | ----- | ------------ | -------- | -------- | ---------- | ------- | -------- | --------- | -------------- |
| Pinecone      | 否    | 否       | 是        | 是          | 较好    | 150+(扩展后更高) | 1     | 未知           | 是        | 否        | 否          | 未知      | 是        | 70        | 227(高性能版为2074) |
| Weaviate      | 是    | 是       | 是        | 是          | 较好    | 791         | 2     | HNSW         | 是        | 是        | 否          | 否,静态分片  | 是        | 25起       | 1536           |
| Milvus        | 是    | 是       | 是        | 是          | 很好    | 2406        | 1     | 多种(11种)      | 是        | 是        | 是          | 是       | 是        | 65起       | 309(高性能版为2291) |
| Qdrant        | 是    | 是       | 是        | 是          | 较好    | 326         | 4     | HNSW         | 是        | 是        | 否          | 是       | 是        | 9起        | 281(高性能版为2520) |
| Chroma        | 是    | 是       | 否        | 是          | 较好    | 未知          | 未知    | HNSW         | 是        | 是        | 否          | 是       | 是        | 白托管免费     | 白托管免费          |
| Elasticsearch | 否    | 是       | 是        | 否          | 一般    | 700~100     | 5~10  | HNSW         | 是        | 否        | 是          | 否,静态分片  | 白托管免费    | 不定        | 1225           |
| PGVector      | 是    | 是       | 是        | 否          | 一般    | 141         | 8     | HNSW/IVFFlat | 是        | 是        | 否          | -       | 白托管免费    | 不定        | 不定             |
## 向量数据库
### 1. 规模与性能

**超大规模（10⁸+）、高并发：**

- Milvus、Vespa、Pinecone

**中小规模（<10⁷）：**

- Qdrant、Weaviate、Redis
### 2. 运维成本

**零运维：**

- Pinecone、MongoDB Atlas、Weaviate (Cloud)

**自研可控：**

- Milvus、FAISS、Vespa

### 3. 功能侧重

**多模态 Any-to-Any：**

- Weaviate、OpenSearch

**复杂过滤 & 混合检索：**

- Qdrant、Elasticsearch

**分析+检索融合：**

- LanceDB、MongoDB Atlas

### 4. 现有技术对接

**已有 PostgreSQL/Redis：**

- Pgvector、Redis Vector

**Elasticsearch 生态：**

- Elasticsearch(+ kNN)

## Milvus
### 一致性选择

默认使用 Bounded Staleness

| 一致性级别                           | 含义                               | 特性                                                 | 典型场景                                        |
| ------------------------------- | -------------------------------- | -------------------------------------------------- | ------------------------------------------- |
| **Strong (一致性)**                | 任何读操作都能立刻看到所有已完成写操作的最新数据，保证"线性化" | • 最高读写一致性<br>• 延迟和吞吐可能受限于副本同步速度                    | • 对数据准确性要求极高的业务，如金融交易、订单支付<br>• 写入与读取强耦合的场景 |
| **Bounded Staleness (有界时滞一致性)** | 读操作可能看到最新写操作之前的旧数据，但落后量可控        | • 最长时延或版本差可配置（如最多滞后5秒或3个版本）<br>• 在可接受延迟范围内兼顾性能与一致性 | • 社交媒体时序数据展示，只要误差在几秒以内可接受<br>• 仪表盘、监控类场景    |
| **Session (会话一致性)**             | 同一客户端会话内，读写操作按照客户端顺序一致；跨会话可见性无保证 | • 保证"读己所写"、"读后写"、"写后读"<br>• 不同客户端之间可能看到不同版本        | • 用户个性化操作：自己写入的数据自己即刻可见<br>• 聊天、个人设置等场景     |
| **Eventually (最终一致性)**          | 写操作会被异步传播到所有副本，短期内读到旧数据，最终收敛到一致  | • 写入延迟最低，吞吐最高<br>• 不保证任何时刻的一致性，只保证最终一致             | • 海量日志收集、埋点数据、离线分析场景<br>• 缓存回源、CDN数据分发      |
### 索引选择

### FLAT
在加载的时候全部加载到数据库中，没有任何的处理，几万或者几十万条数据可以，千万级别不行
### IVF_FLAT
倒排文件
聚类，减少搜索空间
### IVF_PQ 倒排文件与乘积量化
这个文档描述的是**倒排文件与乘积量化(IVFPQ)**，这是一种结合索引和压缩的混合方法，用于高维向量空间中的高效相似性搜索。

IVFPQ是向量数据库和相似性搜索系统中广泛使用的技术，主要解决两个核心问题：

1. **检索速度**：通过倒排文件索引实现快速检索
2. **内存效率**：通过乘积量化实现紧凑存储


 维度分解

- 将每个高维向量分解为**m**个大小相等的子向量
- 参数**m**控制分解的粒度，直接影响压缩率
- 这样可以对向量的不同部分进行并行处理

子空间码本生成

- 在每个子空间内，使用**K均值聚类**学习一组代表性向量（质心）
- 为每个子空间创建包含**2^n**个质心的码本
- 例如：当n=8位时，每个码本包含256个质心
- 这一步为每个维度切片学习"词汇表"

矢量量化

- 将原始数据中的每个子向量替换为其最近质心的索引
- 使用特定的距离度量在相应子空间中找到最接近的匹配
- 将连续向量转换为离散索引 
压缩表示

- 最终的压缩表示由来自各个子空间的**m**个索引组成
- 称为"PQ码"
- 存储需求从**D × 32位**（假设32位浮点数）减少到**m × n位**
- 在保持相似性关系的同时实现显著压缩

- **压缩效果**：大幅降低内存占用
- **检索速度**：通过量化距离计算实现更快的相似性搜索
- **可扩展性**：使大规模向量搜索变得可行
- **灵活性**：可以根据精度与压缩率的权衡调整参数m和n

这项技术被广泛应用于现代向量搜索引擎（如Faiss），是许多近似最近邻搜索系统的核心技术
### HNSW 分层可导航小世界
HNSW构建了一个多层图结构，类似于具有不同缩放级别的地图系统：

- **底层**：包含所有数据点，提供完整信息
- **上层**：由底层采样的数据点子集组成，用于快速导航

层次结构特点

- **每一层**都包含代表数据点的节点
- **节点连接**：通过指示其接近度的边连接起来
- **分层导航**：
    - 较高层级提供长距离跳跃，实现快速接近目标
    - 较低层级支持细粒度搜索，获得最准确的结果

四步搜索过程
 入口点

- 搜索从**顶层的固定入口点**开始
- 该入口点是图中预先确定的节点，作为搜索的起始位置

贪婪搜索

- 算法贪婪地移动到当前层的**最近邻**
- 持续移动直到无法再接近查询向量
- 上层起到**导航作用**，充当粗略的过滤器
- 为下层更精细的搜索找到潜在的入口点

层下降

- 一旦在当前层达到**局部最小值**
- 算法使用预先建立的连接跳转到较低层
- 在新层中重复贪婪搜索过程

最终细化

- 这个过程持续直至到达**底层**
- 在底层进行最终细化步骤，识别最近的邻居
主要优势

- **高效性**：通过分层结构大大减少搜索时间
- **准确性**：底层的细粒度搜索保证结果质量
- **可扩展性**：适用于大规模高维数据集
- **灵活性**：可以调整层数和连接数来平衡速度和精度

HNSW是目前最先进的向量搜索算法之一，被广泛应用于各种向量数据库和搜索引擎中。
### DISKANN

不推荐

## 向量数据库 collection 构建

可以增加 分类 字段，tag，来实现更为准确的搜索

也可以混合构建向量，一条 doc 可以用不同的 embbeding 模型，构建稀疏向量和稠密向量，多重查找来实现。


```mermaid
graph TB
    %% 用户接入层
    subgraph "用户接入层"
        Web[Web端]
        Mobile[移动端]
        WeChat[微信小程序]
        API_Client[第三方API]
    end

    %% API网关层
    subgraph "网关层"
        Gateway[API 网关<br/>- 统一入口<br/>- 限流熔断<br/>- 认证鉴权]
    end

    %% 核心业务层
    subgraph "核心业务系统"
        AIEngine[智能客服引擎<br/>Spring AI + DeepSeek<br/>- 对话流程控制<br/>- 工具调用路由]
        
        RAGSystem[RAG 内容管理系统<br/>- 知识库管理<br/>- 向量数据库<br/>- 文档版本控制]
        
        SensitiveWord[敏感词管理系统<br/>- 敏感词库维护<br/>- 过滤规则配置<br/>- 实时更新机制]
    end

    %% 对话管理层
    subgraph "对话管理系统"
        SessionMgr[会话管理系统<br/>- 会话状态存储<br/>- 上下文维护<br/>- 多轮对话管理]
        
        DialogArchive[对话归档系统<br/>- 聊天记录存储<br/>- 对话历史查询<br/>- 数据备份清理]
    end

    %% 业务集成层
    subgraph "业务集成系统"
        OrderSystem[订单管理系统<br/>- 订单查询接口<br/>- 退订处理接口<br/>- 业务数据同步]
        
        UserSystem[用户管理系统<br/>- 用户认证<br/>- 权限控制<br/>- 用户画像]
    end

    %% 运营支撑层
    subgraph "运营支撑系统"
        HumanService[人工客服系统<br/>- 转接判断逻辑<br/>- 人工坐席管理<br/>- 工单系统集成]
        
        Monitor[监控告警系统<br/>- 系统性能监控<br/>- 业务指标监控<br/>- 异常告警]
        
        Analytics[数据分析系统<br/>- 对话质量分析<br/>- 用户满意度统计<br/>- 业务数据报表]
    end

    %% 基础设施层
    subgraph "基础设施层"
        ConfigMgr[配置管理系统<br/>- 系统参数配置<br/>- 模型参数调优<br/>- 规则引擎配置]
        
        LogSystem[日志管理系统<br/>- 统一日志收集<br/>- 日志分析<br/>- 审计追踪]
        
        VectorDB[(向量数据库<br/>Elasticsearch/Pinecone)]
        
        RelationDB[(关系数据库<br/>MySQL/PostgreSQL)]
        
        Redis[(缓存数据库<br/>Redis)]
    end

    %% 连接关系
    Web --> Gateway
    Mobile --> Gateway
    WeChat --> Gateway
    API_Client --> Gateway
    
    Gateway --> AIEngine
    
    AIEngine --> RAGSystem
    AIEngine --> SensitiveWord
    AIEngine --> SessionMgr
    AIEngine --> HumanService
    
    RAGSystem --> VectorDB
    
    SessionMgr --> Redis
    SessionMgr --> DialogArchive
    
    DialogArchive --> RelationDB
    
    AIEngine --> OrderSystem
    AIEngine --> UserSystem
    
    UserSystem --> RelationDB
    OrderSystem --> RelationDB
    
    Monitor --> LogSystem
    Analytics --> DialogArchive
    Analytics --> RelationDB
    
    ConfigMgr --> AIEngine
    ConfigMgr --> RAGSystem
    ConfigMgr --> SensitiveWord
    
    LogSystem --> RelationDB
    
    %% 样式定义
    classDef userLayer fill:#e1f5fe
    classDef gatewayLayer fill:#f3e5f5
    classDef coreLayer fill:#e8f5e8
    classDef dialogLayer fill:#fff3e0
    classDef businessLayer fill:#fce4ec
    classDef operationLayer fill:#f1f8e9
    classDef infraLayer fill:#fafafa
    
    class Web,Mobile,WeChat,API_Client userLayer
    class Gateway gatewayLayer
    class AIEngine,RAGSystem,SensitiveWord coreLayer
    class SessionMgr,DialogArchive dialogLayer
    class OrderSystem,UserSystem businessLayer
    class HumanService,Monitor,Analytics operationLayer
    class ConfigMgr,LogSystem,VectorDB,RelationDB,Redis infraLayer
```



# 整体项目架构

## 核心业务系统

**智能客服引擎**

- Spring AI + DeepSeek集成
- 对话流程控制
- 工具调用路由

**RAG 内容管理系统**

- 知识库内容管理
- 向量数据库
- 文档版本控制

**敏感词管理系统**

- 敏感词库维护
- 过滤规则配置
- 实时更新机制

## 对话管理系统

**会话管理系统**

- 会话状态存储
- 上下文维护
- 多轮对话管理

**对话归档系统**

- 聊天记录存储
- 对话历史查询
- 数据备份与清理

## 业务集成系统

**订单管理系统集成**

- 订单查询接口
- 退订处理接口
- 业务数据同步

**用户管理系统**

- 用户认证
- 权限控制
- 用户画像

## 运营支撑系统

**人工客服系统**

- 转接判断逻辑
- 人工坐席管理
- 工单系统集成

**监控告警系统**

- 系统性能监控
- 业务指标监控
- 异常告警

**数据分析系统**

- 对话质量分析
- 用户满意度统计
- 业务数据报表

## 基础设施

**API 网关**

- 统一入口
- 限流熔断
- 认证鉴权

**配置管理系统**

- 系统参数配置
- 模型参数调优
- 规则引擎配置

**日志管理系统**

- 统一日志收集
- 日志分析
- 审计追踪
